#pragma kernel Initialize
#pragma kernel Emit
#pragma kernel Update

#include "UnityCG.cginc"
#include "ClassicNoise2D.cginc"


#define NUM_THREAD_X 128
#define NUM_THREAD_Y 1
#define NUM_THREAD_Z 1

cbuffer CB
{
	int _StreamsCount;
	float _Gravity;
	float _DeltaTime;
	float _Jet;
	float _RandSeed;
	float4 _MousePosition;

	float4 _DropParams;
	float _DropSize;
	float4 _SplashParams;
	float _SplashSize;
}

struct Drop
{
	uint streamId;
	bool isAlive;
	float dropSize;
	float3 position;
	float3 prevPosition;
	float3 velocity;
	float4 params; // InitVhCoef, InitVvCoef, UpdatePosCoef, UpdateVelCoef
};

struct StreamLine
{
	float3 birthPosition;
	float3 deathPosition;
	float3 position;
	float3 initVelocity;
	float3 velocity;
};

struct DetectedObject
{
	bool isActive;
	float3 position;
};

float rand(float2 co)
{
	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

RWStructuredBuffer<StreamLine> _StreamLinesBuffer;
StructuredBuffer<DetectedObject> _DetectedObjBuff;

Texture2D _PerlinTexture;
RWStructuredBuffer<Drop> _DropsBuffer;
AppendStructuredBuffer<uint> _DropsPoolBuffer_In;
ConsumeStructuredBuffer<uint> _DropsPoolBuffer_Out;

// #0 Initialize
[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Initialize(uint3 DTid : SV_DispatchThreadID)
{
	_DropsPoolBuffer_In.Append(DTid.x);
}

// #1 Emit
[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Emit(uint3 DTid : SV_DispatchThreadID)
{
	// Velocity
	float theta = cnoise(float2(DTid.x, _RandSeed)) * radians(45);
	float3 v = _StreamLinesBuffer[DTid.x].initVelocity;
	float absV = length(v.yz);

	// Position
	float4 perlin = _PerlinTexture[uint2(DTid.x, _StreamsCount * 0.5)];
	float emitDropAmount = pow(2, perlin.x * 7);
	float emitSplashAmount = pow(2, perlin.x * 7);
	float3 p = _StreamLinesBuffer[DTid.x].birthPosition;
	int nextStreamId = clamp(DTid.x + 1, 0, _StreamsCount - 1);
	float3 posGap = _StreamLinesBuffer[nextStreamId].birthPosition - p;
	float diff = 2.0 * (1.0 - perlin.x) * rand(float2(_RandSeed, DTid.x));

	for (int i = 0; i < emitDropAmount; i++)
	{
		uint id = _DropsPoolBuffer_Out.Consume();

		Drop d = _DropsBuffer[id];
		d.streamId = DTid.x;
		d.isAlive = true;
		d.dropSize = _DropSize;
		d.params = _DropParams;

		d.velocity = float3(v.x + d.params.x * absV * sin(theta),
			v.y - d.params.y * v.y * rand(float2(DTid.x, i + 3)),
			v.z - d.params.x * absV * cos(theta));

		d.position = float3(p.x + posGap.x * rand(float2(DTid.x, i + 1)) + diff * d.velocity.x,
			p.y + 0.3 * perlin.x,
			p.z + posGap.z * rand(float2(DTid.x, i + 2)) + diff * d.velocity.z);

		d.prevPosition = d.position;
		_DropsBuffer[id] = d;
	}

	for (int j = 0; j < emitSplashAmount; j++)
	{
		uint id = _DropsPoolBuffer_Out.Consume();

		Drop d = _DropsBuffer[id];
		d.streamId = DTid.x;
		d.isAlive = true;
		d.dropSize = _SplashSize;
		d.params = _SplashParams;

		d.velocity = float3(v.x + d.params.x * absV * sin(theta),
			v.y - d.params.y * v.y * rand(float2(DTid.x, j + 3)),
			v.z - d.params.x * absV * cos(theta));

		d.position = float3(p.x + posGap.x * rand(float2(DTid.x, j + 1)) + diff * d.velocity.x,
			p.y + 0.6 * perlin.x,
			p.z + posGap.z * rand(float2(DTid.x, j + 2)) + diff * d.velocity.z);

		d.prevPosition = d.position;
		_DropsBuffer[id] = d;
	}
}

// #2 Update
[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Update(uint3 DTid : SV_DispatchThreadID)
{
	Drop d = _DropsBuffer[DTid.x];

	if (d.isAlive)
	{
		d.velocity.y += -_Gravity * _DeltaTime * _Jet;

		float3 p = d.position;
		float3 v = d.velocity;
		d.position = float3(p.x + v.x * d.params.w * d.params.z * (1.0 + rand(float2(DTid.x, _RandSeed * 5.0 * d.params.z))) * _DeltaTime,
			p.y + v.y * d.params.z * _DeltaTime,
			p.z + v.z * d.params.w * d.params.z * (1.0 + rand(float2(DTid.x, _RandSeed * 6.0 * d.params.w)) * _DeltaTime));

		d.prevPosition = p;

		float distanceToMouse = length(_MousePosition.xy - d.position.xy);
		

		float upForce;
		for (int i = 0; i < 10; i++)
		{
			DetectedObject obj = _DetectedObjBuff[i];
			if (obj.isActive)
			{
				float distance = length(obj.position.xy - d.position.xy);
				if (distance < 2)
				{
					float diff = d.position.y - obj.position.y;
					upForce += diff * d.dropSize * 10;
				}
			}
		}

		d.position.x += upForce * cnoise(float2(DTid.x, _RandSeed));
		d.position.y += upForce;

		float3 deathPos = _StreamLinesBuffer[d.streamId].deathPosition;

		if (d.position.y < deathPos.y) {
			d.isAlive = false;
			d.dropSize = 0;
			_DropsPoolBuffer_In.Append(DTid.x);
		}
	}
	else
	{
		d.dropSize = 0;
	}

	_DropsBuffer[DTid.x] = d;
}