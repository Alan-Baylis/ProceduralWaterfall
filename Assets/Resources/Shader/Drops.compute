#pragma kernel Init
#pragma kernel Emit
#pragma kernel Update
#pragma kernel Copy

#include "UnityCG.cginc"
#include "ClassicNoise2D.cginc"

#define NUM_THREAD_X 8
#define NUM_THREAD_Y 1
#define NUM_THREAD_Z 1

cbuffer CB
{
	int _StreamsCount;
	int _PerlinT;
}

struct Drop
{
	uint id;
	float dropSize;
	float3 position;
	float3 velocity;
};

RWStructuredBuffer<Drop> _DropsBuff;

// Dead
AppendStructuredBuffer<Drop> _DeadBuff1_In;
ConsumeStructuredBuffer<Drop> _DeadBuff1_Out;

// Alive 1 / 2
AppendStructuredBuffer<Drop> _AliveBuff1_In;
ConsumeStructuredBuffer<Drop> _AliveBuff1_Out;
AppendStructuredBuffer<Drop> _AliveBuff2_In;
ConsumeStructuredBuffer<Drop> _AliveBuff2_Out;

Texture2D _PerlinTexture;

// 0 Init

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Init(uint3 DTid : SV_DispatchThreadID)
{
	_DeadBuff1_In.Append(_DropsBuff[DTid.x]);
}

// 1 Emit

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Emit(uint3 DTid : SV_DispatchThreadID)
{
	float4 v = _PerlinTexture[uint2(DTid.x, _PerlinT)] *  128;
	for (int i = 0; i < v.x; i++)
	{
		Drop d = _DeadBuff1_Out.Consume();
		d.dropSize = 0.1f;
		d.position = float3(DTid.x * 0.1, i * 0.05, 0);
		d.velocity = float3(0, 1, 0);
		_AliveBuff2_In.Append(d);

		//uint dropId = _ActiveBuffConsume.Consume();
		//_DropsBuff[dropId].dropSize = 0.1;
		//_DropsBuff[dropId].position = float3(0, 0, 0);
		//_DropsBuff[dropId].velocity = float3(0, 0, 0);
	}
}

// 2 Update

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Update(uint3 DTid : SV_DispatchThreadID)
{
	Drop d = _AliveBuff1_Out.Consume();
	d.velocity += float3(0, 0.1, 0);
	d.position += d.velocity;

	float3 pos = d.position;
	if (abs(pos.x) > 10 || abs(pos.y) > 10 || abs(pos.z) > 10) {
		_DeadBuff1_In.Append(d);
	}
	else {
		_AliveBuff2_In.Append(d);
	}
}

//// 3 Register
//
//[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
//void Register(uint3 DTid : SV_DispatchThreadID)
//{
//	Drop d = _TempBuffC.Consume();
//	_InitBuffA.Append(d);
//}

// 3
[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void Copy(uint3 DTid : SV_DispatchThreadID)
{
	Drop d = _AliveBuff2_Out.Consume();
	_AliveBuff1_In.Append(d);
}